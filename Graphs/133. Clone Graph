/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        if (node == null) {
            return null;
        }
        HashMap<Node, Node> map=new HashMap<>();
        return dfs(node,map);
    }

    public Node dfs(Node node, HashMap map)
    {
        if(map.containsKey(node))
        {
            return(Node)map.get(node);
        }
        else
        {
            Node cloneNode=new Node(node.val);
            map.put(node,cloneNode);
            for(Node neighbor:node.neighbors)
            {
                cloneNode.neighbors.add(dfs(neighbor, map));
            }
            return cloneNode;
        }
    }


}
